{"version":3,"sources":["webpack:///./src/hotReload.ts"],"names":[],"mappings":";;;;;;;;AAAA,0BAA0B;AAE1B,MAAM,gBAAgB,GAAG,CAAC,GAAmB,EAAmB,EAAE,CAChE,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CACpB,GAAG,CAAC,YAAY,EAAE,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE;IACvC,OAAO,OAAO,CAAC,GAAG,CAChB,OAAO;SACJ,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC;SAC9B,GAAG,CAAC,CAAC,CAAC,EAAE;QACP,OAAO,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAmB,CAAC,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,CAAE,CAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACrG,CAAC,CAAC,CACL;SACE,IAAI,CAAC,CAAC,KAAY,EAAU,EAAE;QAC7B,OAAO,EAAE,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;IAC5B,CAAC,CAAC;SACD,IAAI,CAAC,OAAO,CAAC;AAClB,CAAC,CAAC,CACH;AAEH,MAAM,4BAA4B,GAAG,CAAC,GAAmB,EAAmB,EAAE,CAC5E,gBAAgB,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CACjC,KAAK;KACF,GAAG,CAAC,CAAC,CAAC,EAAE;IACP,OAAO,CAAC,CAAC,IAAI,GAAI,CAAU,CAAC,YAAY;AAC1C,CAAC,CAAC;KACD,IAAI,EAAE,CACV;AAEH,MAAM,MAAM,GAAG,GAAS,EAAE;IACxB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,aAAa,EAAE,IAAI,EAAE,EAAE,IAAI,CAAC,EAAE;QAC9D,wDAAwD;;QAExD,UAAI,IAAI,CAAC,CAAC,CAAC,0CAAE,EAAE,EAAE;YACf,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;SAC/B;QAED,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE;IACzB,CAAC,CAAC;AACJ,CAAC;AAED,MAAM,YAAY,GAAG,CAAC,GAAmB,EAAE,aAAsB,EAAQ,EAAE;IACzE,4BAA4B,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;QACjD,IAAI,CAAC,aAAa,IAAI,aAAa,KAAK,SAAS,EAAE;YACjD,UAAU,CAAC,GAAG,EAAE,CAAC,YAAY,CAAC,GAAG,EAAE,SAAS,CAAC,EAAE,IAAI,CAAC,EAAC,iBAAiB;SACvE;aAAM;YACL,MAAM,EAAE;SACT;IACH,CAAC,CAAC;AACJ,CAAC;AAED,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;IAC/B,IAAI,IAAI,CAAC,WAAW,KAAK,aAAa,EAAE;QACtC,MAAM,CAAC,OAAO,CAAC,wBAAwB,CAAC,GAAG,CAAC,EAAE,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;KAClE;AACH,CAAC,CAAC","file":"hotReload.js","sourcesContent":["// copy from crx-hotreload\n\nconst filesInDirectory = (dir: DirectoryEntry): Promise<File[]> =>\n  new Promise(resolve =>\n    dir.createReader().readEntries(entries => {\n      return Promise.all(\n        entries\n          .filter(e => e.name[0] !== '.')\n          .map(e => {\n            return e.isDirectory ? filesInDirectory(e as DirectoryEntry) : new Promise(r => (e as any).file(r))\n          }),\n      )\n        .then((files: any[]): File[] => {\n          return [].concat(...files)\n        })\n        .then(resolve)\n    }),\n  )\n\nconst timestampForFilesInDirectory = (dir: DirectoryEntry): Promise<string> =>\n  filesInDirectory(dir).then(files =>\n    files\n      .map(f => {\n        return f.name + (f as File).lastModified\n      })\n      .join(),\n  )\n\nconst reload = (): void => {\n  chrome.tabs.query({ active: true, currentWindow: true }, tabs => {\n    // NB: see https://github.com/xpl/crx-hotreload/issues/5\n\n    if (tabs[0]?.id) {\n      chrome.tabs.reload(tabs[0].id)\n    }\n\n    chrome.runtime.reload()\n  })\n}\n\nconst watchChanges = (dir: DirectoryEntry, lastTimestamp?: string): void => {\n  timestampForFilesInDirectory(dir).then(timestamp => {\n    if (!lastTimestamp || lastTimestamp === timestamp) {\n      setTimeout(() => watchChanges(dir, timestamp), 1000) // retry after 1s\n    } else {\n      reload()\n    }\n  })\n}\n\nchrome.management.getSelf(self => {\n  if (self.installType === 'development') {\n    chrome.runtime.getPackageDirectoryEntry(dir => watchChanges(dir))\n  }\n})\n"],"sourceRoot":""}